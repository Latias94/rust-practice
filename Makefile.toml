#env_files = ["infra/ignore.env", "infra/const.env"]

[config]
default_to_workspace = false

[tasks.uap]
script = "git submodule update --init"

[tasks.rm_sqlite]
script_runner = "@duckscript"
script = ["rm rust-practice.sqlite"]
#ignore_errors=true

[tasks.migration]
script = ["diesel migration run --database-url rust-practice.sqlite"]

[tasks.readme]
script = ["cargo run --bin rustgym-readme"]
dependencies = ["rm_sqlite", "migration"]

[tasks.readme_no_build]
script = ["rustgym-readme.exe"]
dependencies = ["rm_sqlite", "migration"]

[tasks.copy-server]
script = 'cp target/release/rustgym-server rustgym-server'

[tasks.copy-ingest]
script = 'cp target/release/rustgym-ingest rustgym-ingest'

[tasks.wasm-pack]
script = 'wasm-pack build wasm --target no-modules --out-dir ../pkg'

[tasks.archive-wasm]
script = "tar -czvf pkg.tar.gz pkg"

[tasks.archive-static]
script = "tar -czvf static.tar.gz static"

[tasks.watch-wasm]
run_task = { name = ["wasm-pack"] }
watch = { postpone = true, watch = ["./wasm", "./msg", "./consts"] }

[tasks.watch-server]
script = "cargo watch -w server -w msg -w consts -x 'run --bin rustgym-server'"
dependencies = ["wasm-pack"]

[tasks.sonic]
script = "sonic -c infra/config.cfg"

[tasks.dev]
run_task = { name = ["sonic", "watch-server", "watch-wasm"], parallel = true }

[tasks.wasm-test]
command = "wasm-pack"
args = ["test", "--chrome", "--headless", "wasm"]

[tasks.tfrs-test]
script = "cargo test -p rustgym-tfrs"

[tasks.watch-tfrs-test]
run_task = { name = ["tfrs-test"] }
watch = { postpone = true, watch = ["./tfrs", "./tfrs-sys"] }
